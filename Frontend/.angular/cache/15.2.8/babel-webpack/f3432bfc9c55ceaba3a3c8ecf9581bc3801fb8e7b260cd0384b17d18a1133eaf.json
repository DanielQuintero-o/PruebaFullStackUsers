{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class usersService {\n  constructor(http) {\n    this.http = http;\n    this.urlEndpoint = 'http://localhost:3000/api/v1/users';\n  }\n  handleError(error) {\n    if (error.status === 0) {\n      console.error('An error occurred:', error.error);\n    } else {\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n  getAllUsers() {\n    let httpData = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(this.urlEndpoint, httpData).pipe(catchError(this.handleError));\n  }\n  getOneUser(id) {\n    let httpData = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.get(this.urlEndpoint + `/${id}`, httpData).pipe(catchError(this.handleError));\n  }\n}\nusersService.ɵfac = function usersService_Factory(t) {\n  return new (t || usersService)(i0.ɵɵinject(i1.HttpClient));\n};\nusersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: usersService,\n  factory: usersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAwCA,WAAW,QAAO,sBAAsB;AAChF,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAAaC,UAAU,QAAQ,gBAAgB;;;AAK/C,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,gBAAW,GACjB,oCAAoC;EAEC;EAEvCC,WAAW,CAACC,KAAwB;IAClC,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACLE,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE,OAAON,UAAU,CAAC,MAAM,IAAIS,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;EAEAC,WAAW;IACT,IAAIC,QAAQ,GAAG;MACbC,OAAO,EAAE,IAAIb,WAAW,CAAC;QACvB,cAAc,EAAG;OAClB;KACF;IACD,OAAO,IAAI,CAACK,IAAI,CAACS,GAAG,CAAM,IAAI,CAACC,WAAW,EAAEH,QAAQ,CAAC,CACpDI,IAAI,CACHd,UAAU,CAAC,IAAI,CAACI,WAAW,CAAC,CAC7B;EACH;EACAW,UAAU,CAACC,EAAS;IAClB,IAAIN,QAAQ,GAAG;MACbC,OAAO,EAAE,IAAIb,WAAW,CAAC;QACvB,cAAc,EAAG;OAClB;KACF;IACD,OAAO,IAAI,CAACK,IAAI,CAACS,GAAG,CAAM,IAAI,CAACC,WAAW,GAAC,IAAIG,EAAE,EAAE,EAAEN,QAAQ,CAAC,CAC7DI,IAAI,CACHd,UAAU,CAAC,IAAI,CAACI,WAAW,CAAC,CAC7B;EACH;;AArCWH,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgB,SAAZhB,YAAY;EAAAiB,YAFX;AAAM","names":["HttpHeaders","throwError","catchError","usersService","constructor","http","handleError","error","status","console","Error","getAllUsers","httpData","headers","get","urlEndpoint","pipe","getOneUser","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\danie\\OneDrive\\Escritorio\\Pruebas\\PruebaFullStack_Users\\Frontend\\src\\app\\users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Users } from './user';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { map,catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class usersService {\r\n  private urlEndpoint: string =\r\n    'http://localhost:3000/api/v1/users';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  handleError(error: HttpErrorResponse) {\r\n    if (error.status === 0) {\r\n      console.error('An error occurred:', error.error);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `, error.error);\r\n    }\r\n    return throwError(() => new Error('Something bad happened; please try again later.'));\r\n  }\r\n\r\n  getAllUsers() {\r\n    let httpData = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n      })\r\n    }\r\n    return this.http.get<any>(this.urlEndpoint, httpData)\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n  getOneUser(id:string) {\r\n    let httpData = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type':  'application/json',\r\n      })\r\n    }\r\n    return this.http.get<any>(this.urlEndpoint+`/${id}`, httpData)\r\n    .pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}